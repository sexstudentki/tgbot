from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from telegram.ext import ContextTypes, CallbackQueryHandler
from database.db import Database
from ..keyboards import (
    get_shop_categories_keyboard,
    get_shop_items_keyboard,
    get_item_detail_keyboard
)
from ..utils import is_admin

db = Database()

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    text = "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    keyboard = get_shop_categories_keyboard()
    await query.edit_message_text(text, reply_markup=keyboard)

async def show_category_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    category_id = int(query.data.split('_')[1])
    items = db.get_items(category_id)
    category_name = db.get_category_name(category_id)
    
    text = f"{category_name}:\n\n"
    for item in items:
        item_name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        price = item.get('price', '0 RUB')
        quantity = item.get('quantity', 0)
        
        text += f"‚Ä¢ {item_name} - {price}"
        text += f" ({quantity} —à—Ç.)" if quantity > 0 else " (–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)"
        text += "\n"
    
    keyboard = get_shop_items_keyboard(category_id)
    await query.edit_message_text(text, reply_markup=keyboard)

async def handle_item_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    item_id = int(query.data.split('_')[1])
    items = db.get_items(item_id=item_id)
    
    if not items:
        await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    item = items[0]
    text = (
        f"üéÅ {item['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {item['price']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n\n"
    )
    
    if item['quantity'] <= 0:
        text += "üòî –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"
    
    keyboard = get_item_detail_keyboard(item, user_id)
    await query.edit_message_text(text, reply_markup=keyboard)

async def process_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    item_id = int(query.data.split('_')[1])
    item = db.get_items(item_id=item_id)[0]
    
    if item['quantity'] <= 0:
        await query.answer("üòî –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!", show_alert=True)
        return
    
    if not db.update_item_quantity(item['id'], -1):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!", show_alert=True)
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
    db.record_purchase(user_id, item['id'], 1, item['price'])
    
    success_text = (
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {item['name']}\n"
        f"üíµ –¶–µ–Ω–∞: {item['price']}\n\n"
        f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.\n"
        f"üõí –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    await query.edit_message_text(
        success_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    if is_admin(user_id):
        return
        
    admins = db.get_admins()
    for admin in admins:
        try:
            await context.bot.send_message(
                admin['user_id'],
                f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username or query.from_user.id}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {item['name']}\n"
                f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category_name']}\n"
                f"üíµ –¶–µ–Ω–∞: {item['price']}\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å: {item['quantity']} —à—Ç."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

def setup_shop_handlers(application):
    application.add_handler(CallbackQueryHandler(show_categories, pattern="^shop$"))
    application.add_handler(CallbackQueryHandler(show_category_items, pattern="^category_"))
    application.add_handler(CallbackQueryHandler(handle_item_selection, pattern="^item_"))
    application.add_handler(CallbackQueryHandler(process_purchase, pattern="^buy_"))
    application.add_handler(CallbackQueryHandler(show_categories, pattern="^back_to_shop$"))