from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    MessageHandler, 
    filters, 
    CallbackQueryHandler,
    Application
)
from database.db import Database
from keyboards import get_support_ticket_keyboard

db = Database()
support_chats = {}  # {message_id: {'user_id': int, 'admin_id': int, 'user_message': str}}

async def request_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    context.user_data["awaiting_support"] = True

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_support"):
        return
    
    user = update.effective_user
    message = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
    admins = db.get_admins()
    for admin in admins:
        try:
            msg = await context.bot.send_message(
                admin['user_id'],
                f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.id}\n"
                f"üÜî ID: {user.id}\n\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}",
                reply_markup=get_support_ticket_keyboard(user.id)
            )
            support_chats[msg.message_id] = {
                "user_id": user.id,
                "admin_id": admin['user_id'],
                "user_message": message
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
    
    await update.message.reply_text(
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )
    context.user_data["awaiting_support"] = False

async def close_support_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    await query.edit_message_text("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
    
    await context.bot.send_message(
        user_id,
        "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞–∫—Ä—ã—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

def setup_support_handlers(application):
    application.add_handler(CallbackQueryHandler(request_support_message, pattern="^support$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message))
    application.add_handler(CallbackQueryHandler(close_support_ticket, pattern="^close_ticket_"))